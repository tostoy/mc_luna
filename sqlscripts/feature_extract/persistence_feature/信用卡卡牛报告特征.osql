CREATE TABLE order_feature_credit_card (
user_id BIGINT ,
order_id BIGINT ,
ref_id STRING,
feature1 STRING COMMENT '滞纳金金额',
feature2 STRING COMMENT '信用卡账龄',
feature3 STRING COMMENT '卡片可用额度总额',
feature4 STRING COMMENT '卡片信用总额度',
feature5 STRING COMMENT '近12个月现金分期笔数',
feature6 STRING COMMENT '信用卡张数',
feature7 STRING COMMENT '信用卡总额度',
feature8 STRING COMMENT '近12个月取现月数',
feature9 STRING COMMENT '单行最高授信额度',
feature10 STRING COMMENT '单行最低授信额度',
feature11 STRING COMMENT '利息交易金额',
feature12 STRING COMMENT '分期手续费金额',
type STRING COMMENT '报告类型, 1.0: 卡牛 2.0:魔蝎'
)partitioned by(
 pt STRING
 );


insert overwrite table order_feature_credit_card partition(pt)
SELECT pf.user_id, pf.id, d.id
       , CASE d.type
         WHEN '1.0' THEN json_parse(json_parse(result, '$..transTypeList[?(@.trans_type == "滞纳金交易")].trans_amt'), '$.sum()')
         WHEN '2.0' THEN REGEXP_EXTRACT(json_parse(result, '$[0].interest_fee_information.total_overdue_fine_amount'),'"(.*?)"')
         END
       , CASE d.type
         WHEN '1.0' THEN  datediff(FROM_UNIXTIME(pf.created_at), TO_DATE(if(json_parse(json_parse(result, '$..month'),'$.strmin()') == "null", null,json_parse(json_parse(result, '$..month'),'$.strmin()')),'"yyyymm"'), 'mm')
         WHEN '2.0' THEN REGEXP_EXTRACT(json_parse(result, '$[0].user_basic_information.first_bill_months_from_now'),'"(.*?)"')
         END
       , CASE d.type
         WHEN '1.0' THEN  json_parse(json_parse(result, '$..limit_avail'),'$.sum()')
         WHEN '2.0' THEN
         REGEXP_EXTRACT(json_parse(result, '$[0].credit_limit_informatin.total_aviable_credit_limit'),'"(.*?)"')
         END
       , CASE d.type
         WHEN '1.0' THEN json_parse(json_parse(result, '$..credit_limit'),'$.sum()')
         WHEN '2.0' THEN
         REGEXP_EXTRACT(json_parse(result, '$[0].credit_limit_informatin.total_credit_limit'),'"(.*?)"')
         END
       , CASE d.type
         WHEN '1.0' THEN json_parse(json_parse_param(result, '$.orderDataLst.[?(@.staging_type == 3 && @.post_time > {{1}})]',to_char(FROM_UNIXTIME(pf.created_at - 360 * 86400), 'yyyy-mm-dd')), '$.length()')
         END
       , CASE d.type
         WHEN '1.0' THEN get_json_object(result, '$.credit_card_num')
         WHEN '2.0' THEN REGEXP_EXTRACT(json_parse(result, '$[0].user_basic_information.active_cards'),'"(.*?)"')
         END
       , CASE d.type
         WHEN '1.0' THEN json_parse(json_parse(result, '$.creditCardLst[*].credit_limit'), '$.sum()')
         WHEN '2.0' THEN REGEXP_EXTRACT(json_parse(result, '$[0].credit_limit_informatin.total_aviable_credit_limit'),'"(.*?)"')
         END
       , CASE d.type
         WHEN '1.0' THEN json_parse(json_parse_param(result, '$.detailSummaryLst.[?(@.month > {{1}} )].transTypeList.[?(@.trans_type == "取现交易" )]',to_char(FROM_UNIXTIME(pf.created_at - 360 * 86400), 'yyyymm')),'$.length()')
         WHEN '2.0' THEN REGEXP_EXTRACT(json_parse(result, '$[0].new_charge_information.total_withdraw_count_l12m'),'"(.*?)"')
         END
       , CASE d.type
         WHEN '1.0' THEN json_parse(json_parse(result, '$.creditCardLst[*].credit_limit'), '$.max()')
         WHEN '2.0' THEN REGEXP_EXTRACT(json_parse(result, '$[0].credit_limit_informatin.max_total_credit_limit'),'"(.*?)"')

         END
       , CASE d.type
         WHEN '1.0' THEN json_parse(json_parse(result, '$.creditCardLst[*].credit_limit'), '$.min()')
         WHEN '2.0' THEN  REGEXP_EXTRACT(json_parse(result, '$[0].credit_limit_informatin.min_total_credit_limit'),'"(.*?)"')
         END
       , CASE d.type
         WHEN '1.0' THEN json_parse(json_parse(result, '$..transTypeList[?(@.trans_type == "利息交易")].trans_amt'), '$.sum()')
         END
       , CASE d.type
         WHEN '1.0' THEN json_parse(json_parse(result, '$..transTypeList[?(@.trans_type == "取现手续费交易")].trans_amt'), '$.sum()')
         WHEN '2.0' THEN REGEXP_EXTRACT(json_parse(result, '$[0].interest_fee_information.total_installment_fee_amount'),'"(.*?)"')
         END, d.type, pf.pt
from odps_user_loan_order pf
     left join odps_loan_person p on pf.user_id = p.id
     left join odps_credit_person c on p.id_number = c.id_card and p.phone =c.mobile
     left join (
               select * from(
                            select *,row_number() over (partition by person_id order by create_time desc ) as rn from odps_credit_card_report
                            ) a where a.rn =1 and a.type= "1.0" or a.type="2.0"
               ) d on c.id = d.person_id
where pf.pt < 20170921;


